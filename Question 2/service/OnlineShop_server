import ballerina/grpc;
import ballerina/log;

// Define in-memory data structures
type Product record {
    string name;
    string description;
    float price;
    int stockQuantity;
    string sku;
    string status; // "available" or "out of stock"
};

type User record {
    int id;
    string name;
    string role; // "customer" or "admin"
};

type CartItem record {
    int userId;
    string sku;
    int quantity;
};

// In-memory storage
map<Product> productInventory = {};
map<User> users = {};
map<int, CartItem[]> carts = {};
int orderCount = 0;

service "ShoppingService" on new grpc:Listener(9090) {

    // Admin operations
    resource function AddProduct(grpc:Caller caller, Product product) returns error? {
        productInventory[product.sku] = product;
        check caller->send({message: "Product added successfully"});
    }

    resource function CreateUsers(stream<User, grpc:Error?> userStream, grpc:Caller caller) returns error? {
        User? user = check userStream->next();
        while user is User {
            users[user.id] = user;
            user = check userStream->next();
        }
        check caller->send({message: "All users added"});
    }

    resource function UpdateProduct(grpc:Caller caller, UpdateProductRequest req) returns error? {
        if productInventory.hasKey(req.sku) {
            productInventory[req.sku] = req.updated_product;
            check caller->send({message: "Product updated"});
        } else {
            check caller->send({message: "Product not found"});
        }
    }

    resource function RemoveProduct(grpc:Caller caller, ProductSKU sku) returns error? {
        productInventory.remove(sku.sku);
        check caller->send({
            products: from var [_, product] in productInventory.entries()
                      select product
        });
    }

    resource function ListAvailableProducts(grpc:Caller caller, Empty empty) returns error? {
        check caller->send({
            products: from var [_, product] in productInventory.entries()
                      where product.status == "available"
                      select product
        });
    }

    resource function SearchProduct(grpc:Caller caller, ProductSKU sku) returns error? {
        Product? product = productInventory[sku.sku];
        if product is Product {
            check caller->send({message: "Product found", product: product});
        } else {
            check caller->send({message: "Product not available"});
        }
    }

    // Customer operations
    resource function AddToCart(grpc:Caller caller, AddToCartRequest request) returns error? {
        CartItem[] userCart = carts.get(request.user_id, []);
        userCart.push({userId: request.user_id, sku: request.product_sku, quantity: 1});
        carts[request.user_id] = userCart;
        check caller->send({message: "Product added to cart"});
    }

    resource function PlaceOrder(grpc:Caller caller, UserID userId) returns error? {
        CartItem[]? userCart = carts[userId.id];
        if userCart is CartItem[] && userCart.length() > 0 {
            carts.remove(userId.id);
            orderCount += 1;
            check caller->send({message: "Order placed successfully"});
        } else {
            check caller->send({message: "No items in cart"});
        }
    }
}
